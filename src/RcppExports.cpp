// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// HMM_C_raw
List HMM_C_raw(arma::vec& delta, arma::mat& Y_mat, arma::mat& A, arma::mat& B, arma::cube& X_cube, char& family, double eps, double eps_IRLS, int N_iter, int max_N_IRLS, int trace);
RcppExport SEXP _regmhmm_HMM_C_raw(SEXP deltaSEXP, SEXP Y_matSEXP, SEXP ASEXP, SEXP BSEXP, SEXP X_cubeSEXP, SEXP familySEXP, SEXP epsSEXP, SEXP eps_IRLSSEXP, SEXP N_iterSEXP, SEXP max_N_IRLSSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type X_cube(X_cubeSEXP);
    Rcpp::traits::input_parameter< char& >::type family(familySEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type eps_IRLS(eps_IRLSSEXP);
    Rcpp::traits::input_parameter< int >::type N_iter(N_iterSEXP);
    Rcpp::traits::input_parameter< int >::type max_N_IRLS(max_N_IRLSSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(HMM_C_raw(delta, Y_mat, A, B, X_cube, family, eps, eps_IRLS, N_iter, max_N_IRLS, trace));
    return rcpp_result_gen;
END_RCPP
}
// HMM_one_step
List HMM_one_step(arma::vec& delta, arma::mat& Y_mat, arma::mat& A, arma::mat& B, arma::cube& X_cube, char& family, double eps_IRLS, int max_N_IRLS);
RcppExport SEXP _regmhmm_HMM_one_step(SEXP deltaSEXP, SEXP Y_matSEXP, SEXP ASEXP, SEXP BSEXP, SEXP X_cubeSEXP, SEXP familySEXP, SEXP eps_IRLSSEXP, SEXP max_N_IRLSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type X_cube(X_cubeSEXP);
    Rcpp::traits::input_parameter< char& >::type family(familySEXP);
    Rcpp::traits::input_parameter< double >::type eps_IRLS(eps_IRLSSEXP);
    Rcpp::traits::input_parameter< int >::type max_N_IRLS(max_N_IRLSSEXP);
    rcpp_result_gen = Rcpp::wrap(HMM_one_step(delta, Y_mat, A, B, X_cube, family, eps_IRLS, max_N_IRLS));
    return rcpp_result_gen;
END_RCPP
}
// IRLS_EM
arma::vec IRLS_EM(arma::mat& X, arma::vec& gamma, arma::vec& Y, arma::vec& beta, char& family, double eps_IRLS, int max_N);
RcppExport SEXP _regmhmm_IRLS_EM(SEXP XSEXP, SEXP gammaSEXP, SEXP YSEXP, SEXP betaSEXP, SEXP familySEXP, SEXP eps_IRLSSEXP, SEXP max_NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< char& >::type family(familySEXP);
    Rcpp::traits::input_parameter< double >::type eps_IRLS(eps_IRLSSEXP);
    Rcpp::traits::input_parameter< int >::type max_N(max_NSEXP);
    rcpp_result_gen = Rcpp::wrap(IRLS_EM(X, gamma, Y, beta, family, eps_IRLS, max_N));
    return rcpp_result_gen;
END_RCPP
}
// backward
arma::mat backward(arma::vec& delta, arma::vec& Y, arma::mat& A, arma::mat& B, arma::mat& X, char& family);
RcppExport SEXP _regmhmm_backward(SEXP deltaSEXP, SEXP YSEXP, SEXP ASEXP, SEXP BSEXP, SEXP XSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< char& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(backward(delta, Y, A, B, X, family));
    return rcpp_result_gen;
END_RCPP
}
// compute_joint_state
arma::cube compute_joint_state(arma::vec& delta, arma::vec& Y, arma::mat& A, arma::mat& B, arma::mat& X, char& family);
RcppExport SEXP _regmhmm_compute_joint_state(SEXP deltaSEXP, SEXP YSEXP, SEXP ASEXP, SEXP BSEXP, SEXP XSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< char& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(compute_joint_state(delta, Y, A, B, X, family));
    return rcpp_result_gen;
END_RCPP
}
// compute_loglikelihood
double compute_loglikelihood(arma::vec& delta, arma::vec& Y, arma::mat& A, arma::mat& B, arma::mat& X, char& family);
RcppExport SEXP _regmhmm_compute_loglikelihood(SEXP deltaSEXP, SEXP YSEXP, SEXP ASEXP, SEXP BSEXP, SEXP XSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< char& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(compute_loglikelihood(delta, Y, A, B, X, family));
    return rcpp_result_gen;
END_RCPP
}
// compute_state
arma::mat compute_state(arma::vec& delta, arma::vec& Y, arma::mat& A, arma::mat& B, arma::mat& X, char& family);
RcppExport SEXP _regmhmm_compute_state(SEXP deltaSEXP, SEXP YSEXP, SEXP ASEXP, SEXP BSEXP, SEXP XSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< char& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(compute_state(delta, Y, A, B, X, family));
    return rcpp_result_gen;
END_RCPP
}
// forward
arma::mat forward(arma::vec& delta, arma::vec& Y, arma::mat& A, arma::mat& B, arma::mat& X, char& family);
RcppExport SEXP _regmhmm_forward(SEXP deltaSEXP, SEXP YSEXP, SEXP ASEXP, SEXP BSEXP, SEXP XSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< char& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(forward(delta, Y, A, B, X, family));
    return rcpp_result_gen;
END_RCPP
}
// forward_backward
List forward_backward(arma::vec& delta, arma::vec& Y, arma::mat& A, arma::mat& B, arma::mat& X, char& family);
RcppExport SEXP _regmhmm_forward_backward(SEXP deltaSEXP, SEXP YSEXP, SEXP ASEXP, SEXP BSEXP, SEXP XSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< char& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(forward_backward(delta, Y, A, B, X, family));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_regmhmm_HMM_C_raw", (DL_FUNC) &_regmhmm_HMM_C_raw, 11},
    {"_regmhmm_HMM_one_step", (DL_FUNC) &_regmhmm_HMM_one_step, 8},
    {"_regmhmm_IRLS_EM", (DL_FUNC) &_regmhmm_IRLS_EM, 7},
    {"_regmhmm_backward", (DL_FUNC) &_regmhmm_backward, 6},
    {"_regmhmm_compute_joint_state", (DL_FUNC) &_regmhmm_compute_joint_state, 6},
    {"_regmhmm_compute_loglikelihood", (DL_FUNC) &_regmhmm_compute_loglikelihood, 6},
    {"_regmhmm_compute_state", (DL_FUNC) &_regmhmm_compute_state, 6},
    {"_regmhmm_forward", (DL_FUNC) &_regmhmm_forward, 6},
    {"_regmhmm_forward_backward", (DL_FUNC) &_regmhmm_forward_backward, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_regmhmm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
